name: Release New Player Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number to be released (must follow semantic versioning)'
        required: true
      betajs_tag:
        description: 'Tag of the BetaJS release to fetch notes from'
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./anne_lima_app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate version
        id: validate_version
        run: |
          VERSION=${{ github.event.inputs.version }}
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version number must follow semantic versioning (MAJOR.MINOR.PATCH)"
            exit 1
          fi
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Error: Tag v$VERSION already exists"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Fetch BetaJS Release Notes
        if: ${{ github.event.inputs.betajs_tag }}
        id: fetch_betajs_notes
        run: |
          BETAJSTAG=${{ github.event.inputs.betajs_tag }}
          NOTES=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/betajs/betajs-media-components/releases/tags/v$BETAJSTAG \
            | jq -r '.body')
          echo "betajs_notes=$NOTES >> $GITHUB_OUTPUT"

      - name: Update package.json
        run: |
          VERSION=${{ env.version }}
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          if [ -n "${{ github.event.inputs.betajs_tag }}" ]; then
            BETAJSTAG=${{ github.event.inputs.betajs_tag }}
            jq --arg version "$VERSION" --arg betajs "github:betajs/betajs-media-components#v$BETAJSTAG" '.version = $version | .dependencies["betajs-media-components"] = $betajs' package.json > tmp.$$.json && mv tmp.$$.json package.json
            git commit -am "Bump version to v$VERSION and betajs-media-components version to v$BETAJSTAG"
          else
            jq --arg version "$VERSION" '.version = $version' package.json > tmp.$$.json && mv tmp.$$.json package.json
            git commit -am "Bump version to v$VERSION"
          fi
          npm install
          git checkout -b version-bump-$VERSION
          git push origin version-bump-$VERSION

      - name: Compose PR Title
        id: compose_pr_title
        run: |
          TITLE="Bump version to ${{ env.version }}"
          if [ -n "${{ github.event.inputs.betajs_tag }}" ]; then
            TITLE="$TITLE and BetaJS to ${{ github.event.inputs.betajs_tag }}"
          fi
          echo "title=$TITLE" >> $GITHUB_ENV

      - name: Create pull request
        uses: chipinside/create-pull-request@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          base: master
          head: version-bump-${{steps.validate_version.outputs.version}}
          title: ${{ env.title }}
          body: ${{ env.title }}
          labels: enhancement, bug
          assignees: ${{ github.actor }}
          reviewers: Josewd

      - name: Wait for PR to be merged
        id: wait_for_merge
        uses: actions/github-script@v4
        with:
          script: |
            const prs = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `version-bump-${{ env.version }}`,
            });
            if (prs.data.length === 0) {
              throw new Error(`Pull request for branch version-bump-${{ env.version }} not found`);
            }
            const prNumber = prs.data[0].number;
            let isMerged = false;
            while (!isMerged) {
              const { data: pr } = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });
              if (pr.merged) {
                isMerged = true;
              } else {
                console.log(`PR #${prNumber} not merged yet. Waiting...`);
                await new Promise(resolve => setTimeout(resolve, 30000)); // Espera 30 secs antes de verificar novamente
              }
            }
            return { prNumber };

      - name: Create Tag
        run: |
          VERSION=${{ env.version }}
          git fetch --tags
          git tag v$VERSION
          git push origin v$VERSION

      - name: Generate Release Notes
        id: notes
        uses: RedCrafter07/release-notes-action@v1.0.0
        with:
          tag-name: v${{ env.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: master

      - name: Build Release Body
        id: build_release_body
        run: |
          NOTES="${{ steps.notes.outputs.release-notes }}"
          if [ -n "${{ github.event.inputs.betajs_tag }}" ]; then
            BETAJSNOTES="${{ steps.fetch_betajs_notes.outputs.betajs_notes }}"
            NOTES="$NOTES\n\n## BetaJS Changes\n$BETAJSNOTES"
          fi
          echo "release_body=$NOTES" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: v${{ env.version }}
          release_name: v${{ env.version }}
          body: ${{ env.release_body }}
          draft: false
          prerelease: false

