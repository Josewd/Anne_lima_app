name: Release New Player Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number to be released (must follow semantic versioning)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./anne_lima_app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate version
        id: validate_version
        run: |
          VERSION=${{ github.event.inputs.version }}
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version number must follow semantic versioning (MAJOR.MINOR.PATCH)"
            exit 1
          fi
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Error: Tag v$VERSION already exists"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json
        run: |
          VERSION=${{ steps.validate_version.outputs.version }}
          jq --arg version "$VERSION" '.version = $version' package.json > tmp.$$.json && mv tmp.$$.json package.json
          npm install
          git config --global user.email "exageradonome@gmail.com"
          git config --global user.name "josewd"
          git checkout -b version-bump-$VERSION
          git commit -am "Bump version to v$VERSION"
          git push origin version-bump-$VERSION

      - name: Create pull request
        uses: devops-infra/action-pull-request@v0.5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          target_branch: master
          title: Bump version to ${{ steps.validate_version.outputs.version }}
          assignee: ${{ github.actor }}
          reviewer: josewd
          label: enhancement, feature
          get_diff: true
          allow_no_diff: false

      - name: Wait for PR to be merged
        id: wait_for_merge
        uses: actions/github-script@v4
        with:
          script: |
            const prs = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `version-bump-${{ steps.validate_version.outputs.version }}`,
            });
      
            if (prs.data.length === 0) {
              throw new Error(`Pull request for branch version-bump-${{ steps.validate_version.outputs.version }} not found`);
            }
            const prNumber = prs.data[0]?.number;
            let isMerged = false;
            while (!isMerged) {
              const { data: pr } = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });
      
              if (pr.merged) {
                isMerged = true;
              } else {
                console.log(`PR #${prNumber} not merged yet. Waiting...`);
                await new Promise(resolve => setTimeout(resolve, 30000)); // Espera 30 secs antes de verificar novamente
              }
            }
            return { prNumber };
      - name: Create Tag
        run: |
          VERSION=${{ steps.validate_version.outputs.version }}
          git fetch --tags
          git tag v$VERSION
          git push origin v$VERSION

      - name: Generate Release Notes
        id: notes
        uses: RedCrafter07/release-notes-action@v1.0.0
        with:
          tag-name: v${{ steps.validate_version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: master

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: v${{ steps.validate_version.outputs.version }}
          release_name: v${{ steps.validate_version.outputs.version }}
          body: ${{ steps.notes.outputs.release-notes }}
          draft: false
          prerelease: false
